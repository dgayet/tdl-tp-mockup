{
  "files": [
    {
      "fileName": "menu.html",
      "fileBody": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\"/>\n        <title>Awesome!</title>\n        <link rel=\"stylesheet\" href=\"menu.css\"/>\n    </head>\n\n    <body>\n        <div class=\"header\">\n            <div class=\"logo\"><img src=\"images/awesome-logo.svg\"/></div>\n            <ul class=\"menu\">\n                <li class=\"dropdown\"><span>Features ▾</span>\n                    <ul class=\"features-menu\">\n                        <li><a href=\"#\">Harder</a></li>\n                        <li><a href=\"#\">Better</a></li>\n                        <li><a href=\"#\">Faster</a></li>\n                        <li><a href=\"#\">Stronger</a></li>\n                    </ul>\n                </li>\n                <li><a href=\"#\">Blog</a></li>\n                <li><a href=\"#\">Subscribe</a></li>\n                <li><a href=\"#\">About</a></li>\n            </ul>\n        </div>\n    </body>\n</html>",
      "id": 1
    },
    {
      "fileName": "README.md",
      "fileBody": "# Advanced Positioning\nThe are four types of positioning: `css`, `relative`, `absolute` and `fixed`.\n\n> The vast majority of elements on a web page should be laid out according to the static flow of the page. These other positioning schemes come into play when you want to do more advanced things like tweak the position of a particular element or animate a UI component without messing up the surrounding elements.\n\n## Positioned Elements\n- [Example](styles.css)\n- [Web page](schemes.html)\n\nThe CSS `position` property handles the positioning scheme of a particular element. Its default value is `static`. If it doesn't have this value, it is refered to as a *positioned element*.\n\n### Relative Positioning\n\nRelative positioning moves elements around *relative* to where they would normally appear in the static flow of the page.\n\n> This is useful for nudging boxes around when the default flow is just a little bit off.\n\nThe syntax is the following:\n\n```css\n.item {\n    position: relative;\n    top: 30px;\n    left: 30px;\n}\n```\n\nThe difference between margins and relative positioning is that neither the surrounding elements or parent element are affected by this.\n\n### Absolute Positioning\n\nIn this case, the offset is relative to the entire browser window instead. The property has to be set to `absolute`. \n\nUnlike relative positioning, the parents and surrounding elements behave as if the element didn't exist.\n\n### (Relatively) Absolute Positioning\n\nElements can be positioned relative to another *static* element. This can be done by changing the *coordinate system* of an absolutely positioned element.\n\n> Coordinates for absolute elements are always relative to the closest container that is a positioned element. It only falls back to being relative to the browser when none of its ancestors are positioned.\n\nSo, if the parent container's position is set to `relative` and the child is set to `absolute`, the child element will be positioned relative to the parent container. However, there isn't any specified offset for the parent container because the purpose is to hook the child to the parent.\n\n### Fixed Positioning\n\nIn this case, the element is also remeved from the normal flow of the page, and the coordinate system is relative to the entire browser window. \n\nThe difference is that fixed elements *don't scroll* with the rest of the page.\n\n\n### Positioned Elements for Animations\n\nThese advanced positioning schemes allow JavaScript to move elements around while avoiding any kind of interaction with surrounding elements.\n\n## Positioned Elements for Menus\n[Example](menu.css)\n[Web page](menu.html)\n\n### Inline Menu Items\n\nThese are inline menu items\nEsto sigue funcionando?\n",
      "id": 2
    },
    {
      "fileName": "menu.css",
      "fileBody": "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 1200px;\n    font-size: 18px;\n    font-family: monospace;\n    color: #5D6063;\n}\n\na:link, a:visited {\n    color: #5D6063;\n    text-decoration: none;\n}\n\na:hover {\n    text-decoration: underline;\n}\n\n.header {\n    position: fixed;\n    display: flex;\n    justify-content: space-between;\n\n    width: 100%;\n    padding: 50px;\n    background: #D6E9FE\n}\n\n.menu {\n    margin-top: 15px;\n}\n\n.menu > li {\n    display: inline;\n    margin-right: 50px;\n}\n\n.menu > li:last-of-type {\n    margin-right:0;\n}\n\n.dropdown:hover .features-menu {\n    display:flex;\n    flex-direction: column;\n    background: #B2D6FF;\n    border-radius: 5px;\n    padding-top: 60px;\n\n    position: absolute;\n    top: -25px;\n    left: -30px;\n\n    z-index: 1;\n}\n\n.features-menu {\n    display:none;\n}\n\n.features-menu li {\n    list-style: none;\n    border-bottom: 1px solid #FFF;\n\n    padding: 0 40px 10px 20px;\n    margin: 10px;\n}\n\n.features-menu li:last-of-type {\n    border-bottom: none;\n}\n\n.dropdown {\n    position: relative;\n}\n\n.dropdown > span {\n    z-index: 2;\n    position: relative;\n    cursor: pointer;\n}\n",
      "id": 3
    },
    {
      "fileName": "styles.css",
      "fileBody": "* {\n    margin: 0px;\n    padding: 0px;\n    box-sizing: border-box;\n}\n\nbody {\n    height: 1200px;\n}\n\n.container {\n    display: flex;\n    justify-content: center;\n}\n\n.example {\n    display: flex;\n    justify-content: space-around;\n\n    width: 800px;\n    margin: 50px 0;\n    background-color: #D6E9FE;\n}\n\n.absolute {\n    position: relative;\n}\n\n\n.item img {\n    display: block;\n}\n\n.item-relative {\n    position: relative;\n    top: 30px;\n    left: 30px;\n}\n\n.item-absolute {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n}\n\n.item-fixed {\n    position: fixed;\n    bottom: 0;\n    right: 0;\n}",
      "id": 4
    },
    {
      "fileName": "ideas.md",
      "fileBody": "# Lista de ideas para el ejercicio integrador\n\n## TYPESCRIPT\n\n* [whiteboard](https://github.com/excalidraw/excalidraw)\n* [arkanoid games](https://www.youtube.com/watch?v=7bejSTim38A) !vanilla typescript\n* bots -> ⭐\n  * [slack bot](https://www.upsilonit.com/blog/create-a-slack-bot-with-typescript-in-3-steps)\n  * [discord bot](https://www.freecodecamp.org/news/build-a-100-days-of-code-discord-bot-with-typescript-mongodb-and-discord-js-13/)\n  * [telegram bot](https://medium.com/geekculture/build-a-telegram-bot-using-typescript-node-js-and-telegraf-and-deploy-it-on-heroku-fcc28c15614f)\n  * [twitter bot](https://dev.to/alvarotorresc/creating-a-twitter-bot-1pd1)\n* web apps\n  * [web app](https://codeburst.io/a-beginners-guide-to-setting-up-a-web-application-with-typescript-and-express-e1cf8319bc5c)\n  * [portfolio](https://zeyadetman.com/posts/how-i-built-my-portfolio-using-nextjs-typescript-chakraui)\n* [editor de imagenes simple](https://reactjsexample.com/simple-image-editor-built-with-react-mobx-typescript/)\n* [text editor](https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/)->⭐\n  * <https://github.com/tinymce/tinymce>\n* [web text editor](https://betterprogramming.pub/create-a-custom-web-editor-using-typescript-react-antlr-and-monaco-editor-part-1-2f710c69c18c)\n* [notes app](https://www.youtube.com/watch?v=01YKQmia2Jw) ->⭐\n* [clon de notion](https://medium.com/swlh/how-to-build-a-text-editor-like-notion-c510aedfdfcc)\n* [web scraper](https://dev.to/caelinsutch/building-a-web-scraper-in-typescript-14l1) -> ⭐\n* [varios proyectos](https://www.geeksforgeeks.org/top-7-nodejs-project-ideas-for-beginners/)\n* [proyecos con nivel de dificultad](https://www.interviewbit.com/blog/node-js-projects/)\n### Why Typescript\n\n* TypeScript simplifies JavaScript code, making it easier to read and debug.\n* TypeScript is open source.\n* TypeScript provides highly productive development tools for JavaScript IDEs and practices, like static checking.\n* TypeScript makes code easier to read and understand.\n* With TypeScript, we can make a huge improvement over plain JavaScript.\n* TypeScript gives us all the benefits of ES6 (ECMAScript 6), plus more productivity.\n* TypeScript can help us to avoid painful bugs that developers commonly run into when writing JavaScript by type checking the code.\n* Powerful type system, including generics.\n* TypeScript is nothing but JavaScript with some additional features.\n* Structural, rather than nominal.\n* TypeScript code can be compiled as per ES5 and ES6 standards to support the latest browser.\n* Aligned with ECMAScript for compatibility.\n* Starts and ends with JavaScript.\n* Supports static typing.\n* TypeScript will save developers time.\n* TypeScript is a superset of ES3, ES5, and ES6.\n\n#### Additional Features\n\n* Functions with optional parameters.\n* Functions with REST parameters.\n* Generics support.\n* Modules support.\n",
      "id": 5
    },
    {
      "fileName": "lenguajes.txt",
      "fileBody": "Scala: \n  - multiparadigma (funcional, oop)\n  - JVM and Javascript runtime\n  - general purpose\n  - Data processing, distributed computing, and web development\n  - interoperabilidad con Java\n\nClojure: (https://programadorwebvalencia.com/cursos/clojure/introducci%C3%B3n/)\n  - funcional\n  - puede ser ejectuado sobre JVM\n  - general purpose\n\nDart: (https://medium.com/hackernoon/10-good-reasons-why-you-should-learn-dart-4b257708a332#:~:text=Dart%20is%20an%20open%20source,efficient%20language%20to%20work%20with ; https://www.quora.com/Whats-the-deal-with-Dart-as-a-programming-language)\n  - alternativa a Javascript\n  - programación web\n  - oop (support para funcional)\n  - Dart is a general-purpose programming language originally developed by Google and later approved as a standard by Ecma (ECMA-408). It is used to build web, server, desktop, and mobile applications.\n  - Mobile apps written in Dart with Flutter are cross-platform native apps; so they can run on both Android, iOS (like React Native, Xamarin, etc.). You can even write web apps and that code can run on any browser. \n\nHaskell: (https://medium.com/geekculture/why-haskell-a9117c42da12)\n  - genera purpose\n  - puramente funcional\n\nRust: (https://stackoverflow.blog/2020/01/20/what-is-rust-and-why-is-it-so-popular/ )\n  - genera purpose\n  - multiparadigma (funcional, imperativa, oop)\n  - compilado\n  - low-levelish programming language with direct access to hardware and memory --> sistemas embebidos\n  - embedded and bare-metal development, heavy data analysis\n\nJulia: (https://towardsdatascience.com/is-julia-actually-right-for-you-b2c003d7cddf ; https://www.quora.com/What-are-some-good-uses-for-the-Julia-programming-language)\n  - ambition to make a language which is capable of quick computing while retaining a high level of abstraction\n  - ideal para machine learning y scientific computing\n  - compilado, high performance\n  - usa muchisima memoria\n\n\nTypescript: (https://www.codemotion.com/magazine/backend/why-you-should-use-typescript-for-your-next-project/ ; https://stackoverflow.com/questions/12694530/what-is-typescript-and-why-would-i-use-it-in-place-of-javascript ; https://dzone.com/articles/what-is-typescript-and-why-use-it) \n  - agrega syntaxis adicional a JS, corre donde corre JS, entiende JS\n  - es tipado\n  - oop, imperativo\n  - web apps/browser\n  - mejora el server-side de javascript\n\nLUA: (https://www.bmc.com/blogs/lua-programming-language/)\n  - mulitparadigma: estructurado, imperativo, oop, functional\n  - interprete compilado\n  - it is used as a scripting language that can be integrated (embedded) into other programs written in mainly C and C++.\n  - intrepete basado en ansi c\n  - Lua is highly prevalent in video game development as it can be used to create functionality without contaminating the overall performance while also keeping everything separate.\n  - Another area that Lua excels is embedded programming, where size and performance are major concerns\n\nLisp: (https://www.techtarget.com/whatis/definition/LISP-list-processing#:~:text=Lisp%2C%20an%20acronym%20for%20list,the%20development%20of%20other%20languages. ; \nhttps://www.quora.com/What-makes-the-Lisp-programming-language-special)\n  - es una familia de lenguajes? \n  - multiparadigama: funcional, oop\n  - segundo lenguaje de programacion de alto nivel de mayor angtiguedad\n  - list processing\n  - machine learning, quantum computing\n\nCrystal: (https://auth0.com/blog/an-introduction-to-crystal-lang/)\n  - general purpose\n  - oop\n  - inspirado en Ruby\n  - syatically typed\n  - no tiene mucha comunidad (ej: pocas respuestas stackoverflow), perdio popularidad\n  - las dependencias no estan muy mantenidas\n\nElixir:\n  - general purpose\n  - funcional\n  - escrito sobre Earlang\n  - Elixir was aimed for large-scale sites and apps. Elixir uses features of Ruby, Erlang, and Clojure to develop a \"high-concurrency\" and \"low-latency\" languague.\n\nRuby: (https://acloudguru.com/blog/engineering/what-is-the-ruby-programming-language ; \n  https://developer.oracle.com/ruby/what-is-ruby/ ; \n  https://medium.datadriveninvestor.com/why-ruby-is-a-great-language-to-start-programming-with-2f17e0c2907a)\n  - interpretado\n  - puramente OOP\n  - garbage collector\n  - Ruby is a server-side scripting language similar to Python and PERL.\n  - Ruby is great for building desktop applications, static websites, data processing services, and even automation tools. It’s used for web servers, DevOps, and web scraping and crawling.\n  - Ruby stands alone as a high-level programming language. But you really can’t talk about Ruby without mentioning Rails. Ruby on Rails is the application framework that thrust Ruby into the spotlight, boosted its popularity, and made it a great language for the cloud:\n    The Ruby on Rails framework consists of pre-written Ruby code for things like communication, file handling, database connections, and more. It takes care of the tedious items, so you can focus on solving problems. One of the key concepts of Rails is DRY — Don’t Repeat Yourself — which is key to the framework’s efficiency.\n  - se usa mucho para web apps\n\nGo: (https://www.trio.dev/blog/what-is-golang-used-for ;\n  https://acloudguru.com/blog/engineering/what-is-go-an-intro-to-googles-go-programming-language-aka-golang)\n  - compilado\n  - inspirado en C con garbage collector\n  -  Golang is commonly used for the following applications:\n      Distributed Network Services\n      Cloud-Native Development \n      Replacements for Existing Infrastructure\n      Utilities and Stand-Alone Tools\n      News Outlets\n      Media Platform\n  - muy backend\n\nD: (https://www.quora.com/What-is-the-usage-of-the-D-programming-language \n  - general purpose \n  - rediseño de C++\n  - D combines the performance and safety of compiled languages with the expressive power of modern dynamic and functional programming languages\n  - multiparadigma: oop, imperativo, funcional\n  - games, web apps, gui apps\n  - system programming: operating systems, embedded\n  - Mostly anything one would use C++, Java, Python and other not-in-a-browser languages for.\n  - no tan popular ultimamente\n\n\nGDScript: (https://gdscript.com/ ; https://www.javatpoint.com/godot-introduction-of-gdscript)\n  - alto nivel\n  - Su objetivo es optimizarse e integrarse estrechamente con Godot Engine,\n  - GDScript evolved as a custom scripting language to be used with the Godot computer (and mobile device) Game engine, and for those people who look beyond the real world, it also supports Virtual Reality.\n  - muy relacionado con godot?\n\nElm:\n  - web apps\n  - puramente funcional\n  - The initial implementation of the Elm compiler targets HTML, CSS, and JavaScript.[11]  (quizas es necesario tener conocimientos previos de front end?)\n  - back-end: Elm does not officially support server-side development. \n\nEiffel: \n  - oop\n  - Eiffel is a good language with some very interesting features, but greed and lack of foresight with its IDEs and compilers have greatly diminished it\n  - el IDE es pago\n  -  provides an open architecture for interfacing with \"external\" software in any other programming language. It is possible for example to program machine- and operating-system level operations in C.\n  - no me llama particularmente la atencion\n\n\nMi top 5:\n  - Ruby\n  - Rust\n  - Dart/Typescript\n  - Lua\n\n- Rust (embebidos)\n- Dart/Typescript\n- Ruby\n\nMost Loved vs Dreaded language en stackoverflow: https://insights.stackoverflow.com/survey/2021/#technology-most-loved-dreaded-and-wanted",
      "id": 6
    },
    {
      "fileName": "robots.txt",
      "fileBody": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n",
      "id": 7
    }
  ]
}